{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weatherData","WeatherIcon","styled","div","weatherIcon","weather","main","icon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","className","name","Button","inverted","color","circular","onClick","window","location","reload","moment","format","style","fontSize","marginTop","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","fetchData","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2008876f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\nimport moment from 'moment';\r\nimport { Button } from 'semantic-ui-react';\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default function Weather({ weatherData }) {\r\n  \r\n  const WeatherIcon = styled.div`color: whitesmoke`\r\n\r\n  const refresh = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  let weatherIcon = null;\r\n\r\n  if (weatherData.weather[0].main === 'Thunderstorm') {\r\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n  } else if (weatherData.weather[0].main === 'Drizzle') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n  } else if (weatherData.weather[0].main === 'Rain') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n  } else if (weatherData.weather[0].main === 'Snow') {\r\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n  } else if (weatherData.weather[0].main === 'Clear') {\r\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n  } else if (weatherData.weather[0].main === 'Clouds') {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n  } else {\r\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"top\">\r\n        <p className=\"header\">{weatherData.name}</p>\r\n        <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\r\n      </div>\r\n      <div className=\"flex\">\r\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\r\n        <div className=\"flex\">\r\n          <WeatherIcon style={{fontSize:30,marginTop:15}}>{weatherIcon}</WeatherIcon>\r\n          <p className=\"description\">{weatherData.weather[0].main}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\r\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n      </div>\r\n    \r\n  </main>\r\n  )\r\n}","import './App.css'\nimport React, { useEffect, useState } from 'react'\nimport Weather from './components/weather'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\nfunction App() {\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  // to load the functions when the application is loaded and reloaded\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      \n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        console.log(result);\n      });\n    }\n    fetchData();\n  }, [lat,long])\n\n  return (\n    <div className=\"App\">\n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div>\n          <Dimmer active>\n            <Loader>Loading...</Loader>\n          </Dimmer>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// tutorial from https://www.freecodecamp.org/news/learn-react-by-building-a-weather-app/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}